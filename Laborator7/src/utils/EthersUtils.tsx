
import { ethers } from 'ethers';
import { abi as abiNft } from "../../artifacts/contracts/PhotoNft.sol/PhotoNft.json";
import { abi as abiMarket } from "../../artifacts/contracts/NftMarket.sol/NftMarket.json";
import { contractNftAddress, contractMarketAddress, apiKey } from '../config'

export const provider = new ethers.JsonRpcProvider(apiKey);
export const contractNft = new ethers.Contract(contractNftAddress, abiNft, provider);
export const contractMarket = new ethers.Contract(contractMarketAddress, abiMarket, provider);

export const createWalletFromKey = (privateKey) => {
  return new ethers.Wallet(privateKey, provider);
}

export const createNewWallet = () => {
  const wallet = ethers.Wallet.createRandom(provider);

  const pk = wallet.privateKey;

  console.log("createNewWallet: Private Key generated by ethers:", pk);
  console.log("createNewWallet: Address generated by ethers:", wallet.address);

  return wallet;
}

export const getBalance = (address) => {
  return provider.getBalance(address);
};

export const mintNft = async (hash, signer) => {

  const contractNftSigner = contractNft.connect(signer);
  const txResponse = await contractNftSigner.generateNft(hash);
  const txReceipt = await txResponse.wait();

  //get token id from Log: event transfer.
  const _tokenId = txReceipt.logs[0].topics[3];
  return _tokenId;

}


export const approveMarket = async (tokenId, signer) => {

  const contractNftSigner = contractNft.connect(signer);
  const txResponse = await contractNftSigner.approve(contractMarketAddress, tokenId);
  await txResponse.wait();

}

export const listNft = async (tokenId, price, description, signer) => {
  const contractMarketSigner = contractMarket.connect(signer);
  const descriptionBytes32 = ethers.encodeBytes32String(description);
  const txResponse = await contractMarketSigner.list(contractNftAddress, tokenId, price, descriptionBytes32);

  const txReceipt = await txResponse.wait();
  //get Listing id from Log: event List 
  const _listingId = txReceipt.logs[0].topics[3];
  return _listingId;
}


export const buyNft = async (listingId, price, signer) => {
  const contractMarketSigner = contractMarket.connect(signer);
  //const priceInGWei = ethers.parseUnits(price.toString(), "gwei");
  const txResponse = await contractMarketSigner.buy(listingId, {
    value: price,
  });

}



